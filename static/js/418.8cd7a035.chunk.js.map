{"version":3,"file":"static/js/418.8cd7a035.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","webpack://goit-react-hw-08-phonebook/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sectionHead\":\"Section_sectionHead__RIQNp\"};","import styles from './Section.module.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  const { sectionHead } = styles;\n\n  return (\n    <section>\n      <h2 className={sectionHead}>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"contactForm__field\":\"ContactForm_contactForm__field__+cOPR\",\"contactLabel\":\"ContactForm_contactLabel__vt5it\",\"contactInput\":\"ContactForm_contactInput__z6XOX\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__wiIYs\"};","import PropTypes from 'prop-types';\nimport styles from './Button.module.css';\n\nexport const Button = ({ type,title, onClick }) => {\n  const { button } = styles;\n\n  return (\n    <button className={button} onClick={onClick} type={type}>\n      {title}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  type: PropTypes.string\n};\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;","import styles from './ContactForm.module.css';\nimport { Button } from 'components/Button/Button';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nconst ContactForm = () => {\n  const { contactForm, contactForm__field, contactLabel, contactInput } = styles;\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = form.name.value;\n    const number = form.number.value;\n\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    if (contacts.some(contact => contact.number === number)) {\n      const [filteredNumber] = contacts.filter(\n        contact => contact.number === number\n      );\n      alert(`${number} is already in contact with ${filteredNumber.name} `);\n      return;\n    }\n\n    try {\n      await dispatch(\n        addContact({\n          name,\n          number,\n        })\n      );\n    } catch (error) {\n      alert(`Failed to save the contact`);\n    }\n    form.reset();\n  };\n\n  return (\n    <form className={contactForm} onSubmit={onSubmit}>\n      <div className={contactForm__field}>\n        <label htmlFor=\"contactName\" className={contactLabel}>\n          Name\n        </label>\n        <input\n          className={contactInput}\n          id=\"contactName\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={contactForm__field}>\n        <label htmlFor=\"contactTel\" className={contactLabel}>\n          Phone number\n        </label>\n        <input\n          className={contactInput}\n          id=\"contactTel\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <Button type=\"submit\" title=\"Add contact\"></Button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList__wrapper\":\"ContactList_contactList__wrapper__2bWuN\",\"contactList__text\":\"ContactList_contactList__text__mjpGs\",\"contactList__button\":\"ContactList_contactList__button__6ARfg\"};","// extracted by mini-css-extract-plugin\nexport default {\"notif__msg\":\"Notification_notif__msg__Bv6Zf\"};","import PropTypes from 'prop-types';\nimport styles from './Notification.module.css';\n\nexport const Notification = ({ message }) => {\n  const { notif__msg } = styles;\n\n  return <p className={notif__msg}>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import styles from './ContactList.module.css';\nimport { Notification } from 'components/Notification/Notification';\nimport { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { FiDelete } from 'react-icons/fi';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactList = () => {\n  const { contactList__wrapper, contactList__text, contactList__button } = styles;\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = useMemo(() => {\n    return contacts.filter(c => c.name.toLowerCase().includes(filter));\n  }, [contacts, filter]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : filteredContacts.length !== 0 ? (\n        <ul className={contactList__wrapper}>\n          {filteredContacts.map(contact => {\n            return (\n              <li className={contactList__text} key={nanoid()}>\n                <span>\n                  {`${contact.name}:\n               ${contact.number}`}\n                </span>\n                <button\n                  type=\"button\"\n                  className={contactList__button}\n                  onClick={() => dispatch(deleteContact(contact.id))}\n                >\n                  <FiDelete />\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <Notification message=\"Your phonebook is empty\" />\n      )}\n    </>\n  );\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"filterField\":\"Filter_filterField__hjFfe\",\"filterText\":\"Filter_filterText__QGy-k\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import styles from './Filter.module.css';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\n\nconst Filter = () => {\n  const { filterField, filterText, filterInput } = styles;\n\n  const dispatch = useDispatch();\n\n  const filterValue = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <div className={filterField}>\n      <p className={filterText}>Find contact by name</p>\n      <input className={filterInput} type=\"text\" onChange={filterValue} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Section from '../../components/Section/Section';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport React from 'react';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport { selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport Loader from 'components/Loader/Loader';\nimport { useAuth } from 'hooks';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const { user } = useAuth();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title={`Welcome ${user.name} in your phonebook`}>\n        <ContactForm />\n      </Section>\n      <Section title=\"Your contacts\">\n        <>\n          <Filter />\n          {isLoading ? <Loader /> : <ContactList />}\n        </>\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["title","children","sectionHead","styles","className","Button","type","onClick","button","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","contactForm","contactForm__field","contactLabel","contactInput","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","target","name","value","number","some","contact","alert","filteredNumber","addContact","reset","htmlFor","id","pattern","required","Notification","message","notif__msg","contactList__wrapper","contactList__text","contactList__button","filteredContacts","useMemo","c","toLowerCase","includes","Loader","length","map","deleteContact","nanoid","filterField","filterText","filterInput","onChange","filterContacts","user","useAuth","useEffect","fetchContacts"],"sourceRoot":""}